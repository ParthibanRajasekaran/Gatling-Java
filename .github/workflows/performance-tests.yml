name: Gatling Performance Tests & GitHub Pages Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual trigger

permissions:
  contents: write
  pages: write
  id-token: write
  checks: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  performance-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Set up Python for Mock API
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Start Mock API Server
      run: |
        echo "Starting mock API server in background..."
        python3 mock-api.py &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        # Wait for API to start
        echo "Waiting for API to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:8080/api/users/health > /dev/null; then
            echo "‚úÖ API is ready!"
            break
          fi
          echo "Waiting for API... ($i/30)"
          sleep 2
        done

    - name: Verify API Health
      run: |
        echo "Testing API endpoints..."
        curl -f http://localhost:8080/api/users/health || exit 1
        curl -f http://localhost:8080/api/users || exit 1
        echo "‚úÖ All API endpoints are responding correctly"

    - name: Build Project
      run: ./gradlew clean build

    - name: Run Gatling Performance Tests
      run: |
        echo "üöÄ Running Gatling performance tests..."
        ./gradlew gatlingRun -Pgatling.simulationClass=simulations.JavaApiTestSimulation --info

    - name: Generate JUnit XML Reports
      run: |
        echo "üìä Generating JUnit XML reports..."
        ./gradlew generateJUnitXml

    - name: Organize Reports for GitHub Pages
      run: |
        echo "üìÅ Organizing reports for GitHub Pages deployment..."
        mkdir -p public
        
        # Find the latest Gatling results directory
        LATEST_GATLING_DIR=$(find build/reports/gatling -name "javaapitestsimulation-*" -type d | sort | tail -1)
        
        if [ -n "$LATEST_GATLING_DIR" ]; then
          echo "üìä Found Gatling results in: $LATEST_GATLING_DIR"
          
          # Copy all HTML reports to public directory
          cp -r "$LATEST_GATLING_DIR"/* public/
          
          # Copy JUnit XML report
          if [ -f "build/gatling/junit/TEST-JavaApiTestSimulation.xml" ]; then
            cp build/gatling/junit/TEST-JavaApiTestSimulation.xml public/
            echo "‚úÖ JUnit XML report copied"
          fi
          
          # Create an index page with navigation
          cat > public/performance-dashboard.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Performance Test Dashboard</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 40px; }
                .header h1 { color: #2c3e50; margin-bottom: 10px; }
                .header p { color: #7f8c8d; font-size: 18px; }
                .reports-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 40px; }
                .report-card { background: #fff; border: 2px solid #e74c3c; border-radius: 8px; padding: 20px; text-align: center; transition: transform 0.2s; }
                .report-card:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
                .report-card h3 { color: #e74c3c; margin-bottom: 15px; }
                .report-card p { color: #666; margin-bottom: 20px; }
                .btn { display: inline-block; padding: 12px 24px; background: #e74c3c; color: white; text-decoration: none; border-radius: 5px; font-weight: bold; transition: background 0.2s; }
                .btn:hover { background: #c0392b; }
                .btn-secondary { background: #3498db; }
                .btn-secondary:hover { background: #2980b9; }
                .info-section { background: #ecf0f1; padding: 20px; border-radius: 8px; margin-top: 30px; }
                .info-section h3 { color: #2c3e50; margin-bottom: 15px; }
                .badge { display: inline-block; padding: 4px 8px; background: #27ae60; color: white; border-radius: 3px; font-size: 12px; margin-left: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üöÄ Gatling Performance Test Dashboard</h1>
                    <p>Comprehensive performance testing results and reports</p>
                    <div style="margin-top: 20px;">
                        <span class="badge">‚úÖ Tests Passed</span>
                        <span class="badge">üìä Reports Generated</span>
                        <span class="badge">üîÑ CI/CD Automated</span>
                    </div>
                </div>
                
                <div class="reports-grid">
                    <div class="report-card">
                        <h3>üìà Interactive HTML Report</h3>
                        <p>Detailed performance charts, response time distributions, and comprehensive metrics analysis</p>
                        <a href="index.html" class="btn">View HTML Report</a>
                    </div>
                    
                    <div class="report-card">
                        <h3>üß™ JUnit XML Report</h3>
                        <p>CI/CD compatible test results with performance assertions and detailed properties</p>
                        <a href="TEST-JavaApiTestSimulation.xml" class="btn btn-secondary" download>Download XML</a>
                    </div>
                </div>
                
                <div class="info-section">
                    <h3>üìä Test Summary</h3>
                    <p><strong>Test Type:</strong> Gatling Java API Performance Testing</p>
                    <p><strong>Endpoints Tested:</strong> /api/users/health, /api/users, /api/users/{id}</p>
                    <p><strong>Load Pattern:</strong> 5 immediate users + 10 users ramped over 30 seconds</p>
                    <p><strong>Performance Criteria:</strong> Response time < 5000ms, Success rate > 90%</p>
                    <p><strong>Generated:</strong> <span id="timestamp"></span></p>
                </div>
                
                <div class="info-section">
                    <h3>üîó Additional Resources</h3>
                    <p>
                        <a href="https://github.com/gatling/gatling" target="_blank" class="btn btn-secondary">Gatling Documentation</a>
                        <a href="#" onclick="window.history.back();" class="btn" style="margin-left: 10px;">‚Üê Back to Repository</a>
                    </p>
                </div>
            </div>
            
            <script>
                document.getElementById('timestamp').textContent = new Date().toLocaleString();
            </script>
        </body>
        </html>
        EOF
          
          echo "‚úÖ Performance dashboard created"
          
          # Create a simple redirect from root to performance dashboard
          cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta http-equiv="refresh" content="0; url=performance-dashboard.html">
            <title>Redirecting to Performance Dashboard...</title>
        </head>
        <body>
            <p>Redirecting to <a href="performance-dashboard.html">Performance Dashboard</a>...</p>
        </body>
        </html>
        EOF
          
        else
          echo "‚ùå No Gatling results found!"
          exit 1
        fi

    - name: Stop Mock API Server
      if: always()
      run: |
        if [ -n "$API_PID" ]; then
          echo "Stopping mock API server (PID: $API_PID)..."
          kill $API_PID || true
        fi

    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          public/
          build/reports/gatling/
          build/gatling/junit/
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Performance Test Results
        path: public/TEST-JavaApiTestSimulation.xml
        reporter: java-junit
        fail-on-error: false

    - name: Setup Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v5
      with:
        enablement: true

    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: public/

  deploy-pages:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: performance-tests

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';
          const comment = `## üöÄ Performance Test Results
          
          ‚úÖ Performance tests completed successfully!
          
          üìä **View Results:**
          - [Interactive Performance Dashboard](${deploymentUrl})
          - [Detailed HTML Report](${deploymentUrl}index.html)
          
          üéØ **Test Coverage:**
          - API Health Check
          - User Management Endpoints  
          - Load Testing (15 concurrent users)
          
          üîç **Performance Criteria:**
          - ‚úÖ Response Time < 5000ms
          - ‚úÖ Success Rate > 90%
          
          Generated by GitHub Actions workflow.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
