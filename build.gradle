plugins {
    id 'java'
    id 'application'
}

group = 'com.example'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

// Application main class
application {
    mainClass = 'com.example.api.ApiApplication'
}

dependencies {
    // Spring Boot Dependencies (using explicit versions for compatibility)
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.5'

    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // Gatling Dependencies for test compilation and execution
    testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.9.5'
    testImplementation 'io.gatling:gatling-core-java:3.9.5'
    testImplementation 'io.gatling:gatling-http-java:3.9.5'
    testImplementation 'io.gatling:gatling-app:3.9.5'

    // JUnit for Testing Framework
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'

    // Apache HTTP Client for testing
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    testImplementation 'org.apache.httpcomponents.core5:httpcore5:5.2'
}

compileJava {
    options.encoding = 'UTF-8'
    options.release = 17
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.release = 17
}

// Custom Gatling execution task - using custom runner to avoid interactive input
task gatlingRun(type: JavaExec) {
    group = 'gatling'
    description = 'Run Gatling performance tests'
    dependsOn 'compileTestJava'
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'simulations.GatlingRunner'

    doFirst {
        mkdir 'build/reports/gatling'
    }

    doLast {
        println "Gatling simulation executed - check build/reports/gatling for results"
    }
}

// Task to generate JUnit XML reports (standalone)
task generateJUnitXml(type: JavaExec) {
    group = 'reporting'
    description = 'Generate JUnit XML report from Gatling results'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.example.reporting.GatlingJUnitReportGenerator'
}

// Complete performance test workflow (updated)
task performanceTest {
    group = 'verification'
    description = 'Run complete performance testing workflow'
    dependsOn 'clean', 'compileJava', 'gatlingRun', 'generateJUnitXml'

    doLast {
        println "âœ… Performance tests completed successfully!"
        println "ðŸ“Š HTML Reports: build/reports/gatling/"
        println "ðŸ§ª JUnit XML: build/gatling/junit/"
    }
}

// Configure test task
test {
    useJUnitPlatform()
    exclude '**/simulations/**'
}

// Clean task
clean {
    delete 'build'
}

// Gradle wrapper configuration
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}
